{"ast":null,"code":"import Prismic from \"prismic-javascript\";\nconst REPOSITORY = process.env.PRISMIC_REPOSITORY_NAME;\nconst REF_API_URL = `https://${REPOSITORY}.prismic.io/api/v2`;\nconst GRAPHQL_API_URL = `https://${REPOSITORY}.prismic.io/graphql`;\nexport const API_URL = `https://${REPOSITORY}.cdn.prismic.io/api/v2`;\nexport const API_TOKEN = process.env.PRISMIC_API_TOKEN;\nexport const API_LOCALE = process.env.PRISMIC_REPOSITORY_LOCALE;\nexport const PrismicClient = Prismic.client(REF_API_URL, {\n  accessToken: API_TOKEN\n});\n\nasync function fetchAPI(query, {\n  previewData,\n  variables\n} = {}) {\n  const prismicAPI = await PrismicClient.getApi();\n  const res = await fetch(`${GRAPHQL_API_URL}?query=${query}&variables=${JSON.stringify(variables)}`, {\n    headers: {\n      \"Prismic-Ref\": (previewData === null || previewData === void 0 ? void 0 : previewData.ref) || prismicAPI.masterRef.ref,\n      \"Content-Type\": \"application/json\",\n      \"Accept-Language\": API_LOCALE,\n      Authorization: `Token ${API_TOKEN}`\n    }\n  });\n\n  if (res.status !== 200) {\n    console.log(await res.text());\n    throw new Error(\"Failed to fetch API\");\n  }\n\n  const json = await res.json();\n\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error(\"Failed to fetch API\");\n  }\n\n  return json.data;\n}\n\nexport async function getAllPostsWithSlug() {\n  var _data$allPosts;\n\n  const data = await fetchAPI(`\n    {\n      allPosts {\n        edges {\n          node {\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : (_data$allPosts = data.allPosts) === null || _data$allPosts === void 0 ? void 0 : _data$allPosts.edges;\n}\nexport async function getAllPostsForHome(previewData) {\n  const data = await fetchAPI(`\n    query {\n      allPosts(sortBy: date_DESC) {\n        edges {\n          node {\n            date\n            title\n            content\n            coverimage\n            excerpt\n            author {\n              ...on Author {\n                name\n                picture\n              }\n            }\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n  `, {\n    previewData\n  });\n  return data.allPosts.edges;\n}\nexport async function getPostAndMorePosts(slug, previewData) {\n  const data = await fetchAPI(`\n  query PostBySlug($slug: String!, $lang: String!) {\n    post(uid: $slug, lang: $lang) {\n      title\n      content\n      date\n      coverimage\n      author {\n        ...on Author {\n          name\n          picture\n        }\n      }\n      _meta {\n        uid\n      }\n    }\n   morePosts: allPosts(sortBy: date_DESC, first: 3) {\n      edges {\n        node {\n          title\n          content\n          date\n          coverimage\n          excerpt\n          author {\n            ...on Author {\n              name\n              picture\n            }\n          }\n          _meta {\n            uid\n          }\n        }\n      }\n    }\n  }\n  `, {\n    previewData,\n    variables: {\n      slug,\n      lang: API_LOCALE\n    }\n  });\n  data.morePosts = data.morePosts.edges.filter(({\n    node\n  }) => node._meta.uid !== slug).slice(0, 2);\n  return data;\n}","map":null,"metadata":{},"sourceType":"module"}