{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Prismic from '@prismicio/client';\nexport const apiEndpoint = 'https://dry-john.cdn.prismic.io/api/v2';\nexport const accessToken = 'MC5ZRTlWNmhJQUFDWUFyQWM5.Te-_ve-_vTPvv73vv71OB--_ve-_ve-_vVPvv73vv71F77-977-9RX4777-977-977-977-977-9NO-_vUYaBgPvv70'; // Client method to query documents from the Prismic repo\n\nexport const Client = (req = null) => Prismic.client(apiEndpoint, createClientOptions(req, accessToken));\nconst [doc, setDocData] = useState(null);\nuseEffect(() => {\n  const fetchData = async () => {\n    const response = await Client.query(Prismic.Predicates.at(\"document.type\", \"page\"));\n\n    if (response) {\n      setDocData(response.results[0]);\n    }\n  };\n\n  fetchData();\n}, []);\n\nconst createClientOptions = (req = null, prismicAccessToken = null) => {\n  const reqOption = req ? {\n    req\n  } : {};\n  const accessTokenOption = prismicAccessToken ? {\n    accessToken: prismicAccessToken\n  } : {};\n  return _objectSpread(_objectSpread({}, reqOption), accessTokenOption);\n};","map":{"version":3,"sources":["/Volumes/Studio Hard Drive/Dev_loper/dryJohn/frontend/dryjohn/src/prismic-configuration.js"],"names":["Prismic","apiEndpoint","accessToken","Client","req","client","createClientOptions","doc","setDocData","useState","useEffect","fetchData","response","query","Predicates","at","results","prismicAccessToken","reqOption","accessTokenOption"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,mBAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,wCAApB;AACP,OAAO,MAAMC,WAAW,GAAG,sHAApB,C,CAEP;;AACA,OAAO,MAAMC,MAAM,GAAG,CAACC,GAAG,GAAG,IAAP,KACpBJ,OAAO,CAACK,MAAR,CAAeJ,WAAf,EAA4BK,mBAAmB,CAACF,GAAD,EAAMF,WAAN,CAA/C,CADK;AAGP,MAAM,CAACK,GAAD,EAAMC,UAAN,IAAoBC,QAAQ,CAAC,IAAD,CAAlC;AAEAC,SAAS,CAAC,MAAM;AACd,QAAMC,SAAS,GAAG,YAAY;AAC5B,UAAMC,QAAQ,GAAG,MAAMT,MAAM,CAACU,KAAP,CACrBb,OAAO,CAACc,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,MAAvC,CADqB,CAAvB;;AAGA,QAAIH,QAAJ,EAAc;AACZJ,MAAAA,UAAU,CAACI,QAAQ,CAACI,OAAT,CAAiB,CAAjB,CAAD,CAAV;AACD;AACF,GAPD;;AAQAL,EAAAA,SAAS;AACV,CAVQ,EAUN,EAVM,CAAT;;AAWA,MAAML,mBAAmB,GAAG,CAACF,GAAG,GAAG,IAAP,EAAaa,kBAAkB,GAAG,IAAlC,KAA2C;AACrE,QAAMC,SAAS,GAAGd,GAAG,GAAG;AAAEA,IAAAA;AAAF,GAAH,GAAa,EAAlC;AACA,QAAMe,iBAAiB,GAAGF,kBAAkB,GAAG;AAAEf,IAAAA,WAAW,EAAEe;AAAf,GAAH,GAAyC,EAArF;AACA,yCACKC,SADL,GAEKC,iBAFL;AAID,CAPD","sourcesContent":["import Prismic from '@prismicio/client'\n\nexport const apiEndpoint = 'https://dry-john.cdn.prismic.io/api/v2'\nexport const accessToken = 'MC5ZRTlWNmhJQUFDWUFyQWM5.Te-_ve-_vTPvv73vv71OB--_ve-_ve-_vVPvv73vv71F77-977-9RX4777-977-977-977-977-9NO-_vUYaBgPvv70'\n\n// Client method to query documents from the Prismic repo\nexport const Client = (req = null) => (\n  Prismic.client(apiEndpoint, createClientOptions(req, accessToken))\n)\nconst [doc, setDocData] = useState(null);\n\nuseEffect(() => {\n  const fetchData = async () => {\n    const response = await Client.query(\n      Prismic.Predicates.at(\"document.type\", \"page\")\n    );\n    if (response) {\n      setDocData(response.results[0]);\n    }\n  };\n  fetchData();\n}, []);\nconst createClientOptions = (req = null, prismicAccessToken = null) => {\n  const reqOption = req ? { req } : {}\n  const accessTokenOption = prismicAccessToken ? { accessToken: prismicAccessToken } : {}\n  return {\n    ...reqOption,\n    ...accessTokenOption,\n  }\n}"]},"metadata":{},"sourceType":"module"}