{"ast":null,"code":"import Prismic from \"prismic-javascript\";\nconst REPOSITORY = \"dry-john.cdn\";\nconst REF_API_URL = `https://${REPOSITORY}.prismic.io/api/v2`;\nconst GRAPHQL_API_URL = `https://${REPOSITORY}.prismic.io/graphql`; // export const API_URL = 'https://your-repo-name.cdn.prismic.io/api/v2'\n\nexport const API_TOKEN = \"MC5ZRTlWNmhJQUFDWUFyQWM5.Te-_ve-_vTPvv73vv71OB--_ve-_ve-_vVPvv73vv71F77-977-9RX4777-977-977-977-977-9NO-_vUYaBgPvv70\";\nexport const API_LOCALE = process.env.PRISMIC_REPOSITORY_LOCALE;\nexport const PrismicClient = Prismic.client(REF_API_URL, {\n  accessToken: API_TOKEN\n});\n\nasync function fetchAPI(query, {\n  previewData,\n  variables\n} = {}) {\n  const prismicAPI = await PrismicClient.getApi();\n  const res = await fetch(`${GRAPHQL_API_URL}?query=${query}&variables=${JSON.stringify(variables)}`, {\n    headers: {\n      \"Prismic-Ref\": (previewData === null || previewData === void 0 ? void 0 : previewData.ref) || prismicAPI.masterRef.ref,\n      \"Content-Type\": \"application/json\",\n      \"Accept-Language\": API_LOCALE,\n      Authorization: `Token ${API_TOKEN}`\n    }\n  });\n\n  if (res.status !== 200) {\n    console.log(await res.text());\n    throw new Error(\"Failed to fetch API\");\n  }\n\n  const json = await res.json();\n\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error(\"Failed to fetch API\");\n  }\n\n  return json.data;\n}\n\nexport async function getAllPostsWithSlug() {\n  var _data$allPosts;\n\n  const data = await fetchAPI(`\n    {\n      allPosts {\n        edges {\n          node {\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : (_data$allPosts = data.allPosts) === null || _data$allPosts === void 0 ? void 0 : _data$allPosts.edges;\n}\nexport async function getAllPostsForHome(previewData) {\n  const data = await fetchAPI(`\n    query {\n      allPosts(sortBy: date_DESC) {\n        edges {\n          node {\n            date\n            title\n            content\n            coverimage\n            excerpt\n            author {\n              ...on Author {\n                name\n                picture\n              }\n            }\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n  `, {\n    previewData\n  });\n  return data.allPosts.edges;\n}\nexport async function getPostAndMorePosts(slug, previewData) {\n  const data = await fetchAPI(`\n  query PostBySlug($slug: String!, $lang: String!) {\n    post(uid: $slug, lang: $lang) {\n      title\n      content\n      date\n      coverimage\n      author {\n        ...on Author {\n          name\n          picture\n        }\n      }\n      _meta {\n        uid\n      }\n    }\n\n   morePosts: allPosts(sortBy: date_DESC, first: 3) {\n      edges {\n        node {\n          title\n          content\n          date\n          coverimage\n          excerpt\n          author {\n            ...on Author {\n              name\n              picture\n            }\n          }\n          _meta {\n            uid\n          }\n        }\n      }\n    }\n  }\n  `, {\n    previewData,\n    variables: {\n      slug,\n      lang: API_LOCALE\n    }\n  });\n  data.morePosts = data.morePosts.edges.filter(({\n    node\n  }) => node._meta.uid !== slug).slice(0, 2);\n  return data;\n}","map":{"version":3,"sources":["/Volumes/Studio Hard Drive/Dev_loper/dryJohn/frontend/dryjohn/src/lib/api.js"],"names":["Prismic","REPOSITORY","REF_API_URL","GRAPHQL_API_URL","API_TOKEN","API_LOCALE","process","env","PRISMIC_REPOSITORY_LOCALE","PrismicClient","client","accessToken","fetchAPI","query","previewData","variables","prismicAPI","getApi","res","fetch","JSON","stringify","headers","ref","masterRef","Authorization","status","console","log","text","Error","json","errors","error","data","getAllPostsWithSlug","allPosts","edges","getAllPostsForHome","getPostAndMorePosts","slug","lang","morePosts","filter","node","_meta","uid","slice"],"mappings":"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","sourcesContent":["import Prismic from \"prismic-javascript\";\n\nconst REPOSITORY = \"dry-john.cdn\";\nconst REF_API_URL = `https://${REPOSITORY}.prismic.io/api/v2`;\nconst GRAPHQL_API_URL = `https://${REPOSITORY}.prismic.io/graphql`;\n// export const API_URL = 'https://your-repo-name.cdn.prismic.io/api/v2'\nexport const API_TOKEN = \"MC5ZRTlWNmhJQUFDWUFyQWM5.Te-_ve-_vTPvv73vv71OB--_ve-_ve-_vVPvv73vv71F77-977-9RX4777-977-977-977-977-9NO-_vUYaBgPvv70\";\nexport const API_LOCALE = process.env.PRISMIC_REPOSITORY_LOCALE;\n\nexport const PrismicClient = Prismic.client(REF_API_URL, {\n  accessToken: API_TOKEN,\n});\n\nasync function fetchAPI(query, { previewData, variables } = {}) {\n  const prismicAPI = await PrismicClient.getApi();\n  const res = await fetch(\n    `${GRAPHQL_API_URL}?query=${query}&variables=${JSON.stringify(variables)}`,\n    {\n      headers: {\n        \"Prismic-Ref\": previewData?.ref || prismicAPI.masterRef.ref,\n        \"Content-Type\": \"application/json\",\n        \"Accept-Language\": API_LOCALE,\n        Authorization: `Token ${API_TOKEN}`,\n      },\n    }\n  );\n\n  if (res.status !== 200) {\n    console.log(await res.text());\n    throw new Error(\"Failed to fetch API\");\n  }\n\n  const json = await res.json();\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error(\"Failed to fetch API\");\n  }\n  return json.data;\n}\n\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      allPosts {\n        edges {\n          node {\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n  `);\n  return data?.allPosts?.edges;\n}\n\nexport async function getAllPostsForHome(previewData) {\n  const data = await fetchAPI(\n    `\n    query {\n      allPosts(sortBy: date_DESC) {\n        edges {\n          node {\n            date\n            title\n            content\n            coverimage\n            excerpt\n            author {\n              ...on Author {\n                name\n                picture\n              }\n            }\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n  `,\n    { previewData }\n  );\n\n  return data.allPosts.edges;\n}\n\nexport async function getPostAndMorePosts(slug, previewData) {\n  const data = await fetchAPI(\n    `\n  query PostBySlug($slug: String!, $lang: String!) {\n    post(uid: $slug, lang: $lang) {\n      title\n      content\n      date\n      coverimage\n      author {\n        ...on Author {\n          name\n          picture\n        }\n      }\n      _meta {\n        uid\n      }\n    }\n\n   morePosts: allPosts(sortBy: date_DESC, first: 3) {\n      edges {\n        node {\n          title\n          content\n          date\n          coverimage\n          excerpt\n          author {\n            ...on Author {\n              name\n              picture\n            }\n          }\n          _meta {\n            uid\n          }\n        }\n      }\n    }\n  }\n  `,\n    {\n      previewData,\n      variables: {\n        slug,\n        lang: API_LOCALE,\n      },\n    }\n  );\n\n  data.morePosts = data.morePosts.edges\n    .filter(({ node }) => node._meta.uid !== slug)\n    .slice(0, 2);\n\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}