{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/Studio Hard Drive/Dev_loper/dryJohn/frontend/dryjohn/src/components/AllPosts.js\";\nimport { useEffect, useState } from \"react\";\nimport Prismic from \"@prismicio/client\";\nimport { Client } from \"../prismic-configuration.js\";\n\nfunction AllPosts({\n  showControls\n}) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([{\n    id: 419,\n    title: \"This is a template\",\n    body: \"Template is a body\",\n    image: \"\"\n  }]);\n  const styles = {\n    post: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n      gap: \"1em\",\n      wordBreak: \"keep-all\"\n    },\n    article: {\n      maxWidth: \"500px\"\n    }\n  };\n  const [doc, setDocData] = React.useState(null);\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const response = await Client.query(Prismic.Predicates.at(\"document.type\", \"page\"));\n\n      if (response) {\n        setDocData(response.results[0]);\n      }\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.post,\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"article\", {\n      style: styles.article,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), showControls ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(post.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(post.id),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this) : \"\"]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticProps({\n  params\n}) {\n  const client = Client();\n  const doc = await client.getByUID(\"page\", params.uid);\n  return {\n    props: {\n      doc\n    }\n  };\n}\nexport async function getStaticPaths() {\n  return {\n    // You can run a separate query here to get dynamic parameters from your documents.\n    paths: [{\n      params: {\n        uid: \"1\"\n      }\n    }, {\n      params: {\n        uid: \"2\"\n      }\n    }],\n    fallback: true\n  };\n}\nexport default AllPosts;\nAllPosts.defaultProps = {\n  showControls: false,\n  baseUrl: \"\",\n  posts: \"\"\n};","map":{"version":3,"sources":["/Volumes/Studio Hard Drive/Dev_loper/dryJohn/frontend/dryjohn/src/components/AllPosts.js"],"names":["useEffect","useState","Prismic","Client","AllPosts","showControls","posts","setPosts","id","title","body","image","styles","post","display","gridTemplateColumns","gap","wordBreak","article","maxWidth","doc","setDocData","React","fetchData","response","query","Predicates","at","results","map","handleDelete","handleEdit","getStaticProps","params","client","getByUID","uid","props","getStaticPaths","paths","fallback","defaultProps","baseUrl"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Prismic from \"@prismicio/client\";\nimport { Client } from \"../prismic-configuration.js\";\nfunction AllPosts({ showControls }) {\n  const [posts, setPosts] = useState([\n    {\n      id: 419,\n      title: \"This is a template\",\n      body: \"Template is a body\",\n      image: \"\",\n    },\n  ]);\n\n  const styles = {\n    post: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n      gap: \"1em\",\n      wordBreak: \"keep-all\",\n    },\n    article: {\n      maxWidth: \"500px\",\n    },\n  };\n  const [doc, setDocData] = React.useState(null);\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const response = await Client.query(\n        Prismic.Predicates.at(\"document.type\", \"page\")\n      );\n      if (response) {\n        setDocData(response.results[0]);\n      }\n    };\n    fetchData();\n  }, []);\n  return (\n    <div style={styles.post}>\n      {posts.map((post) => (\n        <article style={styles.article} key={post.id}>\n          <h1>{post.title}</h1>\n          <p>{post.body}</p>\n          <p>{post.image}</p>\n          {showControls ? (\n            <div>\n              <button onClick={() => handleDelete(post.id)}>Delete</button>\n              <button onClick={() => handleEdit(post.id)}>Edit</button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </article>\n      ))}\n    </div>\n  );\n}\n\nexport async function getStaticProps({ params }) {\n  const client = Client();\n  const doc = await client.getByUID(\"page\", params.uid);\n\n  return {\n    props: {\n      doc,\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  return {\n    // You can run a separate query here to get dynamic parameters from your documents.\n    paths: [{ params: { uid: \"1\" } }, { params: { uid: \"2\" } }],\n    fallback: true,\n  };\n}\nexport default AllPosts;\n\nAllPosts.defaultProps = {\n  showControls: false,\n  baseUrl: \"\",\n  posts: \"\",\n};\n"]},"metadata":{},"sourceType":"module"}