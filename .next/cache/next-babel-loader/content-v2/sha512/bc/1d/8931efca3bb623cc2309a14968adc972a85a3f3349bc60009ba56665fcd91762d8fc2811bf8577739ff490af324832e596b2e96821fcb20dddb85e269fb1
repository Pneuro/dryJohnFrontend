{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/Studio Hard Drive/Dev_loper/dryJohn/frontend/dryjohn/src/components/AllPosts.js\";\nimport { useEffect, useState } from \"react\";\nimport Prismic from \"@prismicio/client\";\nimport { Date, Link, RichText } from \"prismic-reactjs\";\nimport { Client } from \"../prismic-configuration.js\";\n\nfunction AllPosts({\n  showControls\n}) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([{\n    id: 1\n  }, {\n    id: 2\n  }]);\n  Prismic;\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await Client.query(Prismic.Predicates.at(\"document.type\", \"page\"));\n\n      if (response) {\n        setPosts(response.results[0]);\n      }\n    };\n\n    fetchData();\n  }, []); // Link Resolver\n\n  function linkResolver(posts) {\n    // Define the url depending on the postsument type\n    if (posts.type === \"page\") {\n      return \"/page/\" + posts.uid;\n    } else if (posts.type === \"blog_post\") {\n      return \"/blog/\" + posts.uid;\n    } // Default to homepage\n\n\n    return \"/\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.post,\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"article\", {\n      style: styles.article,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), showControls ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(post.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(post.id),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this) : \"\"]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticProps({\n  params\n}) {\n  const client = Client();\n  const doc = await client.getByUID(\"page\", params.uid);\n  return {\n    props: {\n      doc\n    }\n  };\n}\nconst styles = {\n  post: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    gap: \"1em\",\n    wordBreak: \"keep-all\"\n  },\n  article: {\n    maxWidth: \"500px\"\n  }\n};\nexport async function getStaticPaths() {\n  return {\n    // You can run a separate query here to get dynamic parameters from your documents.\n    paths: [{\n      params: {\n        uid: \"1\"\n      }\n    }, {\n      params: {\n        uid: \"2\"\n      }\n    }],\n    fallback: true\n  };\n}\nexport default AllPosts;\nAllPosts.defaultProps = {\n  showControls: false,\n  baseUrl: \"\",\n  posts: \"\"\n};","map":{"version":3,"sources":["/Volumes/Studio Hard Drive/Dev_loper/dryJohn/frontend/dryjohn/src/components/AllPosts.js"],"names":["useEffect","useState","Prismic","Date","Link","RichText","Client","AllPosts","showControls","posts","setPosts","id","fetchData","response","query","Predicates","at","results","linkResolver","type","uid","styles","post","map","article","title","body","image","handleDelete","handleEdit","getStaticProps","params","client","doc","getByUID","props","display","gridTemplateColumns","gap","wordBreak","maxWidth","getStaticPaths","paths","fallback","defaultProps","baseUrl"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport Prismic from \"@prismicio/client\";\nimport { Date, Link, RichText } from \"prismic-reactjs\";\nimport { Client } from \"../prismic-configuration.js\";\n\nfunction AllPosts({ showControls }) {\n  const [posts, setPosts] = useState([{ id: 1 }, { id: 2 }]);\n  Prismic\n\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await Client.query(\n        Prismic.Predicates.at(\"document.type\", \"page\")\n      );\n      if (response) {\n        setPosts(response.results[0]);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Link Resolver\n  function linkResolver(posts) {\n    // Define the url depending on the postsument type\n    if (posts.type === \"page\") {\n      return \"/page/\" + posts.uid;\n    } else if (posts.type === \"blog_post\") {\n      return \"/blog/\" + posts.uid;\n    }\n\n    // Default to homepage\n    return \"/\";\n  }\n  return (\n    <div style={styles.post}>\n      {posts.map((post) => (\n        <article style={styles.article} key={post.id}>\n          <h1>{post.title}</h1>\n          <p>{post.body}</p>\n          <p>{post.image}</p>\n          {showControls ? (\n            <div>\n              <button onClick={() => handleDelete(post.id)}>Delete</button>\n              <button onClick={() => handleEdit(post.id)}>Edit</button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </article>\n      ))}\n    </div>\n  );\n}\nexport async function getStaticProps({ params }) {\n  const client = Client();\n  const doc = await client.getByUID(\"page\", params.uid);\n\n  return {\n    props: {\n      doc,\n    },\n  };\n}\nconst styles = {\n  post: {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    gap: \"1em\",\n    wordBreak: \"keep-all\",\n  },\n  article: {\n    maxWidth: \"500px\",\n  },\n};\n\nexport async function getStaticPaths() {\n  return {\n    // You can run a separate query here to get dynamic parameters from your documents.\n    paths: [{ params: { uid: \"1\" } }, { params: { uid: \"2\" } }],\n    fallback: true,\n  };\n}\nexport default AllPosts;\n\nAllPosts.defaultProps = {\n  showControls: false,\n  baseUrl: \"\",\n  posts: \"\",\n};\n"]},"metadata":{},"sourceType":"module"}