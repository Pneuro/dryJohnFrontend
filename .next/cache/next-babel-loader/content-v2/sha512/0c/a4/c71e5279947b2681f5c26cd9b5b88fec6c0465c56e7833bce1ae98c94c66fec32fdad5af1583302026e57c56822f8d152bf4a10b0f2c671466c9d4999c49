{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/Studio Hard Drive/Dev_loper/dryJohn/frontend/dryjohn/src/components/BlogForm.js\";\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst BlogForm = () => {\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: body,\n    1: setBody\n  } = useState(\"\");\n  const {\n    0: image,\n    1: setImage\n  } = useState({\n    preview: \"\",\n    raw: \"\",\n    title,\n    body\n  });\n\n  const onTitleChange = e => setTitle(e.target.value);\n\n  const onBodyChange = e => setBody(e.target.value);\n\n  const onImageChange = e => {\n    if (e.target.files.length) {\n      setImage({\n        preview: URL.createObjectURL(e.target.files[0]),\n        raw: e.target.files[0],\n        text: title,\n        body: body\n      });\n    }\n  };\n\n  console.log(image);\n\n  const handleImageSubmit = e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"body\", body);\n    formData.append(\"file\", image.raw); // Write some logic to ALSO send this image and the URL to it to Cloudinary to solve all the problems\n\n    const imageHeader = {\n      method: \"POST\",\n      body: formData\n    };\n    fetch(\"/image_entry\", imageHeader).then(response => response.json()).then(res => console.log(res)).catch(err => console.error(err.message));\n  };\n\n  const styles = {\n    wrapper: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(auto-fit, minmax(250px, 1fr))\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      margin: \"auto\",\n      maxWidth: \"400px\"\n    },\n    image: {\n      borderRadius: \"5px\"\n    },\n    input: {\n      margin: \"1em\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    method: \"POST\",\n    onSubmit: handleImageSubmit,\n    style: styles.wrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Post Entry Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"title\",\n      placeholder: \"Title\",\n      type: \"text\",\n      onChange: onTitleChange,\n      style: styles.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"body\",\n      style: {\n        fontSize: \"12px\"\n      },\n      placeholder: \"Body\",\n      type: \"textarea\",\n      onChange: onBodyChange,\n      rows: \"10\",\n      style: styles.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"file\",\n      placeholder: \"Image\",\n      type: \"file\",\n      required: true,\n      onChange: onImageChange,\n      style: styles.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.input,\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), image.preview ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image.preview,\n      style: styles.image,\n      alt: \"dummy\",\n      width: \"100%\",\n      height: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\nBlogForm.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n  image: PropTypes.object\n};\nexport default BlogForm;","map":{"version":3,"sources":["/Volumes/Studio Hard Drive/Dev_loper/dryJohn/frontend/dryjohn/src/components/BlogForm.js"],"names":["useState","PropTypes","BlogForm","title","setTitle","body","setBody","image","setImage","preview","raw","onTitleChange","e","target","value","onBodyChange","onImageChange","files","length","URL","createObjectURL","text","console","log","handleImageSubmit","preventDefault","formData","FormData","append","imageHeader","method","fetch","then","response","json","res","catch","err","error","message","styles","wrapper","display","gridTemplateColumns","justifyContent","alignItems","margin","maxWidth","borderRadius","input","fontSize","propTypes","string","object"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst BlogForm = () => {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [image, setImage] = useState({ preview: \"\", raw: \"\", title, body });\n\n  const onTitleChange = (e) => setTitle(e.target.value);\n  const onBodyChange = (e) => setBody(e.target.value);\n  const onImageChange = (e) => {\n    if (e.target.files.length) {\n      setImage({\n        preview: URL.createObjectURL(e.target.files[0]),\n        raw: e.target.files[0],\n        text: title,\n        body: body,\n      });\n    }\n  };\n  console.log(image);\n\n  const handleImageSubmit = (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"body\", body);\n    formData.append(\"file\", image.raw);\n    // Write some logic to ALSO send this image and the URL to it to Cloudinary to solve all the problems\n    const imageHeader = {\n      method: \"POST\",\n      body: formData,\n    };\n    fetch(\"/image_entry\", imageHeader)\n      .then((response) => response.json())\n      .then((res) => console.log(res))\n      .catch((err) => console.error(err.message));\n  };\n\n  const styles = {\n    wrapper: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(auto-fit, minmax(250px, 1fr))\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      margin: \"auto\",\n      maxWidth: \"400px\",\n    },\n    image: {\n      borderRadius: \"5px\",\n    },\n    input: {\n      margin: \"1em\",\n    },\n  };\n  return (\n    <form method=\"POST\" onSubmit={handleImageSubmit} style={styles.wrapper}>\n      <h2>Post Entry Form</h2>\n      <input\n        name=\"title\"\n        placeholder=\"Title\"\n        type=\"text\"\n        onChange={onTitleChange}\n        style={styles.input}\n      />\n\n      <textarea\n        name=\"body\"\n        style={{ fontSize: \"12px\" }}\n        placeholder=\"Body\"\n        type=\"textarea\"\n        onChange={onBodyChange}\n        rows=\"10\"\n        style={styles.input}\n      />\n      <input\n        name=\"file\"\n        placeholder=\"Image\"\n        type=\"file\"\n        required={true}\n        onChange={onImageChange}\n        style={styles.input}\n      />\n      <button style={styles.input} type=\"submit\">\n        Submit\n      </button>\n      {image.preview ? (\n        <img\n          src={image.preview}\n          style={styles.image}\n          alt=\"dummy\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      ) : (\n        \"\"\n      )}\n    </form>\n  );\n};\n\nBlogForm.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n  image: PropTypes.object,\n};\n\nexport default BlogForm;\n"]},"metadata":{},"sourceType":"module"}